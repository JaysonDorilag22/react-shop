#######################################################################################
                                    Terminal
#######################################################################################
1. cd /
2. mkdir react-shop
3. cd react-shop
4. code .

#######################################################################################
                                    VS CODE
#######################################################################################

1. create backend folder in [react-shop]
2. create frontend in [react-shop]
3. cd backend in <terminal>


#######################################################################################
                                4. install packages
#######################################################################################

npm init -y
npm i bcrypt cookie-parser crypto dotenv express jsonwebtoken mongoose validator
npm i nodemon --save-dev

in [package.json]
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon server.js"
  },
                    

#######################################################################################
                        5. create config folder in [backend]
                        6. create config.env in [backend/config]
                        (change DB_URI to your own mongodb link)
#######################################################################################

PORT = 4001
NODE_ENV = DEVELOPMENT
DB_URI = "mongodb+srv://emingala02:admin1234@cluster0.argacqg.mongodb.net/shop?retryWrites=true&w=majority"
JWT_SECRET = gWlkpvmeYqas79948OiH
JWT_EXPIRES_TIME = 7d
COOKIE_EXPIRES_TIME = 7


#######################################################################################
                        7. create database.js in [backend/config]
#######################################################################################

const mongoose = require('mongoose');

const connectDatabase = () => {
   
    mongoose.connect(process.env.DB_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        
    }).then(con => {
        console.log(`MongoDB Database connected with HOST: ${con.connection.host}`)
    })
}

module.exports = connectDatabase


#######################################################################################
                        8. create data folder in [backend]
        9. create products.json in [backend/data] (check json file in repository)
#######################################################################################


#######################################################################################
                            10. create app.js in [backend]
#######################################################################################

const express = require('express');
const app = express();

const products = require('./routes/product');
app.use(express.json());
app.use('/api/v1',products);
module.exports = app;


#######################################################################################
                            11. create server.js in [backend]
#######################################################################################

const app = require('./app');
const connectDatabase = require('./config/database')

const dotenv = require('dotenv');
dotenv.config({path: './config/config.env'})

connectDatabase();

app.listen(process.env.PORT, () => {
	console.log(`server started on port:' ${process.env.PORT} in ${process.env.NODE_ENV} mode`);
});





12. create models folder in [backend]
13. create product.js in [backend/models] (check product.js)
13. create controllers folder in [backend]
14. create productController.js in [backend/controllers] (check productController.js in repository)
15. create routes folder in [backend]
16. create products.js in [backend/routes] (check product.js in repository)
17. create utils folder in [backend]
18. create apiFeatures.js in [backend/utils] (check apiFeatures.js in repository)
19. create user.js in [backend/models] (check user.js in repository)
20. create authController.js in [backend/controllers] (check authController.js in repository)
21. create auth.js in [backend/routes] (check auth.js in repository)

#######################################################################################
                            22. link auth route in app.js
#######################################################################################

const express = require('express');
const app = express();

const products = require('./routes/product');
const auth = require('./routes/auth');
app.use(express.json());
app.use('/api/v1',products);
app.use('/api/v1', auth);
module.exports = app;                            

NOTE:
npm uninstall bcrypt
npm i bcryptjs



23. create jwToken.js in [backend/utils] (check jwToken.js in repository)
24. create middleware folder in [backend]


#######################################################################################
                     25. create auth.js in [backend/middleware]
#######################################################################################
const User = require('../models/user')
const jwt = require("jsonwebtoken")

exports.isAuthenticatedUser = async (req, res, next) => {
    const { token } = req.cookies
    //  console.log(token)

     if (!token) {
         return next(new ErrorHandler('Login first to access this resource.', 401))
    }

    if (!token) {
        return res.status(401).json({message:'Login first to access this resource'})
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET)
    req.user = await User.findById(decoded.id);
    
    next()
};

 exports.authorizeRoles = (...roles) => {
	
     return (req, res, next) => {
         console.log(roles, req.user, req.body);
         if (!roles.includes(req.user.role)) {
             return res.status(403).json({message:`Role (${req.user.role}) is not allowed to acccess this resource`})
             return next(
                 new ErrorHandler(`Role (${req.user.role}) is not allowed to acccess this resource`, 403))
         }
         next()
     }
}



#######################################################################################
                     26. add cookie-parser in app.js [backend/app.js]
#######################################################################################
const express = require('express');
const app = express();
const cookie = require('cookie-parser');

const products = require('./routes/product');
const auth = require('./routes/auth');
app.use(express.json());
app.use(cookie());
app.use('/api/v1',products);
app.use('/api/v1', auth);
module.exports = app;


#######################################################################################
        27. apply middleware in product.js route [backend/routes/product.js]
#######################################################################################

add this:
const { isAuthenticatedUser,authorizeRoles} = require('../middleware/auth');

change these:
router.post('/product/new', isAuthenticatedUser, newProduct);
router.route('/admin/product/:id', isAuthenticatedUser).put(updateProduct).delete(deleteProduct);

#######################################################################################
                    28. User model (getResetPasswordToken method)
#######################################################################################
userSchema.methods.getResetPasswordToken = function () {
    // Generate token
    const resetToken = crypto.randomBytes(20).toString('hex');

    // Hash and set to resetPasswordToken
    this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex')

    // Set token expire time
    this.resetPasswordExpire = Date.now() + 30 * 60 * 1000

    return resetToken

}
#######################################################################################
                        29. Authcontroller (forgotPassword method)
#######################################################################################
exports.forgotPassword = async (req, res, next) => {
    const user = await User.findOne({ email: req.body.email });
    if (!user) {
        return res.status(404).json({ error: 'User not found with this email' })
        // return next(new ErrorHandler('User not found with this email', 404));
    }
    // Get reset token
    const resetToken = user.getResetPasswordToken();
    await user.save({ validateBeforeSave: false });
    // Create reset password url
    const resetUrl = `${req.protocol}://${req.get('host')}/password/reset/${resetToken}`;
    const message = `Your password reset token is as follow:\n\n${resetUrl}\n\nIf you have not requested this email, then ignore it.`
    try {
        await sendEmail({
            email: user.email,
            subject: 'ShopIT Password Recovery',
            message
        })

        res.status(200).json({
            success: true,
            message: `Email sent to: ${user.email}`
        })

    } catch (error) {
        user.resetPasswordToken = undefined;
        user.resetPasswordExpire = undefined;
        await user.save({ validateBeforeSave: false });
        return res.status(500).json({ error: error.message })
        // return next(new ErrorHandler(error.message, 500))
    }
}

#######################################################################################
                        30. Authcontroller (resetPassword method)
#######################################################################################
exports.resetPassword = async (req, res, next) => {
    // Hash URL token
    const resetPasswordToken = crypto.createHash('sha256').update(req.params.token).digest('hex')
    const user = await User.findOne({
        resetPasswordToken,
        resetPasswordExpire: { $gt: Date.now() }
    })

    if (!user) {
        return res.status(400).json({ message: 'Password reset token is invalid or has been expired' })
        // return next(new ErrorHandler('Password reset token is invalid or has been expired', 400))
    }

    if (req.body.password !== req.body.confirmPassword) {
        return res.status(400).json({ message: 'Password does not match' })
        // return next(new ErrorHandler('Password does not match', 400))
    }

    // Setup new password
    user.password = req.body.password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    await user.save();
    sendToken(user, 200, res);
}

#######################################################################################
                        31. Authcontroller (UpdatePassword method)
#######################################################################################
exports.updatePassword = async (req, res, next) => {
    const user = await User.findById(req.user.id).select('password');
    // Check previous user password
    const isMatched = await user.comparePassword(req.body.oldPassword)
    if (!isMatched) {
        return res.status(400).json({ message: 'Old password is incorrect' })
    }
    user.password = req.body.password;
    await user.save();
    sendToken(user, 200, res)

}

#######################################################################################
                        32. Update [routes/auth.js]
#######################################################################################
const express = require('express');
const router = express.Router();

const {registerUser, loginUser, logout, forgotPassword, resetPassword, getUserProfile, updatePassword} = require('../controllers/authController');
const { isAuthenticatedUser,authorizeRoles} = require('../middleware/auth');


router.post('/register',registerUser);
router.post('/login', loginUser);
router.get('/logout', logout);
router.post('/password/forgot', forgotPassword);
router.put('/password/reset/:token', resetPassword);
router.get('/me', isAuthenticatedUser, getUserProfile);
router.put('/password/update', isAuthenticatedUser, updatePassword);
module.exports = router;


33. Create order model in [backend/models].
34. Create orderController in [backend/controllers].
35. Create order route in [backend/routes]


#######################################################################################
                            INSOMNIA HTTP REQUEST LINKS
#######################################################################################                            

                                ==============                                
                                 (GET) FILTER
                                ==============                                    
http://localhost:4001/api/v1/products?page=1&ratings[gte]=3&price[lte]=200&price[gte]=10
                                

                                ==============
                               (GET) PAGINATION
                                ==============                                  
            http://localhost:4001/api/v1/products?keyword=usb&page=3


                                ==============
                                 (GET) SEARCH
                                ==============                                    
                http://localhost:4001/api/v1/products?keyword=usb


                                ==============
                            (DELETE) DELETE PRODUCT
                                ==============                                
        http://localhost:4001/api/v1/admin/product/651e51d71efa8eb4c16a80db   


                                ==============
                            (PUT) UPDATE PRODUCT
                                ==============                                                             
        http://localhost:4001/api/v1/admin/product/651e51d71efa8eb4c16a80db                                


                                ==============
                             (GET) SINGLE PRODUCT
                                ==============                                
            http://localhost:4001/api/v1/product/651e51d71efa8eb4c16a80db                                


                                ==============
                              (GET) GET PRODUCTS
                                ==============                                 
                     http://localhost:4001/api/v1/products


                                ==============
                              (POST) NEW PRODUCT
                                ==============                                 
                    http://localhost:4001/api/v1/product/new
                    

                                ==============
                                (POST) REGISTER
                                ==============                                 
                    http://localhost:4001/api/v1/register


                                ==============
                                 (POST) LOGIN
                                ==============                                 
                      http://localhost:4001/api/v1/login


                                ==============
                                 (POST) LOGOUT
                                ==============                                 
                      http://localhost:4001/api/v1/logout


                                ==============
                            (POST) FORGOT PASSWORD
                                ============== 
                    http://localhost:4001/api/v1/password/forgot  


                                ==============
                            (POST) RESET PASSWORD
                                ============== 
                 http://localhost:4001/api/v1/password/reset/:token


                                ==============
                            (POST) UPDATE PASSWORD
                                ============== 
                   http://localhost:4001/api/v1/password/update
                          (log in first, then copy token)  
                  (set body to JSON, then set auth to Bearer Token)  
                        (Paste Token and set Prefix to 'Bearer')  






cloudinary
create folders avatars and products



andami na sumunod di ko na nasundan

FRONT END SUNDAN NIYO NALANG SA GITHUB :)

JK TO NA NGA

